/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package geburtstagsverwaltung;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.PrintJob;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.JAXB;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

/**
 *
 * @author lessi
 */
public class MainFrame extends javax.swing.JFrame {
    private final File file = new File("birthdays.xml");
    private final String pattern = "dd.MMMM";
    private final SimpleDateFormat simpleDateFormat;
    private final String today;
    
    private BirthdayModel model = new BirthdayModel();
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        Locale.setDefault(Locale.GERMAN);
        simpleDateFormat = new SimpleDateFormat(pattern);
        today = simpleDateFormat.format(new Date());
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        todaysBdayTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        options = new javax.swing.JMenu();
        addButton = new javax.swing.JMenuItem();
        removeButton = new javax.swing.JMenuItem();
        removeAllButton = new javax.swing.JMenuItem();
        printButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(400, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        outTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Datum", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(outTable);

        jPanel1.add(jScrollPane1);

        todaysBdayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Heutige Geburtstage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(todaysBdayTable);

        jPanel1.add(jScrollPane2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        options.setText("Optionen");

        addButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        addButton.setText("Hinzufügen");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        options.add(addButton);

        removeButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.CTRL_MASK));
        removeButton.setText("Entfernen");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        options.add(removeButton);

        removeAllButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        removeAllButton.setText("Alle Entfernen");
        removeAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllButtonActionPerformed(evt);
            }
        });
        options.add(removeAllButton);

        printButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printButton.setText("Drucken");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        options.add(printButton);

        jMenuBar1.add(options);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        TreeMap<String, ArrayList<String>> birthdays = model.getBirthdaysMap();
        ArrayList<String> names;
        DefaultTableModel tableModel = (DefaultTableModel) outTable.getModel();
        int[] selected = outTable.getSelectedRows();
        
        for(int i = 0; i < selected.length; i++){
            int index = selected[i] - i;
            String date = (String) tableModel.getValueAt(index, 0);
            String name = (String) tableModel.getValueAt(index, 1);
            
            //Gibts mehr Daten wie das ausgewählte
            if (!"".equals(date) && index + 1 < tableModel.getRowCount()
                && "".equals(tableModel.getValueAt(index + 1, 0))) {
                tableModel.setValueAt(date, index + 1, 0); 
            } else {
                date = getDate(selected[i] - i);
                System.out.println(date);
            }
            
            //Entfernt die ausgewählten Daten vom Model
            names = birthdays.get(date);
            names.remove(name);
            if (names.isEmpty()) {
                birthdays.remove(date);
            } else {
                birthdays.put(date, names);
            }
            
            model.setBirthdaysMap(birthdays);
            tableModel.removeRow(selected[i] - i);
          }
        addTodaysBdays();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        AddDialog dialog = new AddDialog(this, true);
        dialog.setVisible(true);
        if (!dialog.canceled) {
            String date = simpleDateFormat.format(dialog.birthday.getTime());
            String name = dialog.name;
            TreeMap<String, ArrayList<String>> birthdays = model.getBirthdaysMap();
            ArrayList<String> names;
            
            if (birthdays.containsKey(date)) {
                names = birthdays.get(date);
                names.add(name);
                birthdays.put(date, names);
            } else {
                names = new ArrayList<>();
                names.add(name);
                birthdays.put(date, names);
            }
            model.setBirthdaysMap(birthdays);
            addToTable((TreeMap<String, ArrayList<String>>) birthdays.clone());
        }
        addTodaysBdays();
    }//GEN-LAST:event_addButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            saveToXML(file);
        } catch (JAXBException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            readFromXML(file);
        } catch (JAXBException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        addToTable(model.getBirthdaysMap());
        addTodaysBdays();
    }//GEN-LAST:event_formWindowOpened

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        PrintJob prjob = getToolkit().getPrintJob(this, "Testseite", null);
        if (null != prjob) {
            final int iPageResol = prjob.getPageResolution();
            final Dimension pageDimension = prjob.getPageDimension();

            Graphics pg = prjob.getGraphics();
            if (null != pg && 0 < iPageResol) {
                int iAddY = 20;
                int iRand = (int) Math.round(iPageResol * 2. / 2.54);  // 2 cm Rand
                int iPosX = iRand + iRand / 4;                            // Textposition
                int iPosY = iPosX - iAddY / 2;
                int iWdth = pageDimension.width - iRand * 2;        // innere Breite

                Font header = new Font("SansSerif", Font.BOLD, iAddY * 2 / 3);
                Font standard = new Font("SansSerif", Font.PLAIN, iAddY * 2 / 3);
                TreeMap<String, ArrayList<String>> birthdays = model.getBirthdaysMap();
                ArrayList<String> names;

                pg.setFont(header);
                pg.setColor(Color.BLUE);
                pg.drawString("Geburtstagsliste", iWdth / 2, iPosY);

                pg.setFont(standard);
                pg.setColor(Color.BLACK);
                for (String date : birthdays.keySet()) {
                    names = birthdays.get(date);
                    for (String name : names) {
                        if (names.indexOf(name) == 0) {
                            pg.drawString(date + ":", iPosX, iPosY += iAddY);
                        }
                        pg.drawString("- " + name, iPosX, iPosY += iAddY);
                    }
                    pg.drawString(" ", iPosX, iPosY += iAddY);
                }

                pg.dispose();
            }
            prjob.end();
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void removeAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllButtonActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) outTable.getModel();
        tableModel.setRowCount(0);
        model.setBirthdaysMap(null);
        tableModel = (DefaultTableModel) todaysBdayTable.getModel();
        tableModel.setRowCount(0);
    }//GEN-LAST:event_removeAllButtonActionPerformed

    /*
        Sortierte Daten in Table einfügen
        gleiche Daten werden vereinfacht
    */
    public void addToTable(TreeMap<String, ArrayList<String>> birthdays) {
        DefaultTableModel tableModel = (DefaultTableModel) outTable.getModel();
        tableModel.setRowCount(0);
        
        for (String date : birthdays.keySet()) {          
            for (String name : birthdays.get(date)) {
                String putDate = date;
                if (birthdays.get(date).indexOf(name) != 0) {
                    putDate = "";
                }
                tableModel.addRow(new Object[] {
                    putDate, name
                });
            }
        }
        
    }
    
    /*
        Datum von Zeile ohne angezigtes Datum
    */
    public String getDate(int index) {
        DefaultTableModel tableModel = (DefaultTableModel) outTable.getModel();
        for (; index >= 0;) {
            if (tableModel.getValueAt(index, 0).equals("")) {
                index--;
            } else {
                return (String) tableModel.getValueAt(index, 0);
            }
        }
        
        return null;
    }
    
    public void saveToXML(File file) throws JAXBException {
        if (file != null) {
            JAXBContext jc = JAXBContext.newInstance(BirthdayModel.class);
            Marshaller m = jc.createMarshaller();
            m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            m.marshal(model, file);
        }
    }
    
    public void readFromXML(File file)  throws JAXBException {
        if (file != null) {
            model = JAXB.unmarshal(file, BirthdayModel.class);
        }
    }
    
    public void addTodaysBdays() {
        DefaultTableModel todaysBdayModel = (DefaultTableModel) todaysBdayTable.getModel();
        todaysBdayModel.setRowCount(0);
        ArrayList<String> names = model.getBirthdaysMap().get(today);
        
        if (names != null) {
            for (int i = 0; i < names.size(); i++) {
                todaysBdayModel.addRow(new Object[]{
                    names.get(i)
                });
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu options;
    private javax.swing.JTable outTable;
    private javax.swing.JMenuItem printButton;
    private javax.swing.JMenuItem removeAllButton;
    private javax.swing.JMenuItem removeButton;
    private javax.swing.JTable todaysBdayTable;
    // End of variables declaration//GEN-END:variables
}
